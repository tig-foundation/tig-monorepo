name: Build tig-aarch64 algorithm

on:
  workflow_dispatch:
    inputs:
      challenge_type:
        description: 'Challenge type to build'
        required: true
        type: choice
        options:
          - knapsack
          - satisfiability
          - vector-search
          - vehicle-routing
      algorithm_name:
        description: 'Algorithm name'
        required: true
        type: string
      rust_toolchain:
        description: 'Rust toolchain to use'
        required: true
        type: choice
        options:
          - nightly-2024-12-17
          - nightly-2025-01-16
        default: nightly-2025-01-16
      llvm_release:
        description: 'LLVM release version'
        required: true
        type: choice
        options:
          - '0 - Testing 0.0.0'
          - '1 - Testing 0.0.1'
        default: '1 - Testing 0.0.1'
  push:
    branches:
      - 'aarch64/**'

jobs:
  build:
    runs-on: ubuntu-22.04-arm
    container:
      image: debian:12
    permissions:
      contents: write
      statuses: write
    steps:
      - name: Install git
        run: |
          apt-get update -y
          apt-get install git -y
          
      - uses: actions/checkout@v4

      - name: Extract branch info
        id: branch_info
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            BRANCH_PATH="${GITHUB_REF#refs/heads/}"
            IFS='/' read -r _ CATEGORY ALGO_NAME <<< "$BRANCH_PATH"
            echo "challenge_type=$CATEGORY" >> $GITHUB_OUTPUT
            echo "algorithm_name=$ALGO_NAME" >> $GITHUB_OUTPUT
            echo "rust_toolchain=" >> $GITHUB_OUTPUT
            echo "llvm_release=" >> $GITHUB_OUTPUT
          else
            echo "challenge_type=${{ inputs.challenge_type }}" >> $GITHUB_OUTPUT
            echo "algorithm_name=${{ inputs.algorithm_name }}" >> $GITHUB_OUTPUT
            echo "rust_toolchain=${{ inputs.rust_toolchain }}" >> $GITHUB_OUTPUT
            echo "llvm_release=$(echo '${{ inputs.llvm_release }}' | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          fi

      - name: Build tig-aarch64
        env:
          ALGORITHM_NAME: ${{ steps.branch_info.outputs.algorithm_name }}
          LLVM_RELEASE: ${{ steps.branch_info.outputs.llvm_release }}
          RUST_TOOLCHAIN: ${{ steps.branch_info.outputs.rust_toolchain }}
        run: |
          chmod +x tig-aarch64/build.sh
          cd tig-aarch64
          LLVM_RELEASE=${LLVM_RELEASE} ./build.sh --${{ steps.branch_info.outputs.challenge_type }} .
          cd ..
          git config --global --add safe.directory "$(realpath .)"

      - name: Copy to algorithms directory
        run: |
          CHALLENGE_DIR=$(echo "${{ steps.branch_info.outputs.challenge_type }}" | tr '-' '_')
          mkdir -p tig-algorithms/native/${CHALLENGE_DIR}
          rm -f tig-algorithms/native/${CHALLENGE_DIR}/${{ steps.branch_info.outputs.algorithm_name }}.native
          cp tig-aarch64/rtsig_blob.dylib tig-algorithms/native/${CHALLENGE_DIR}/${{ steps.branch_info.outputs.algorithm_name }}.native

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.branch_info.outputs.challenge_type }}-${{ steps.branch_info.outputs.algorithm_name }}-${{ github.sha }}-${{ steps.branch_info.outputs.rust_toolchain }}
          path: tig-aarch64/rtsig_blob.dylib

      - name: Auto commit
        id: auto_commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Compiled native algorithm ${{ steps.branch_info.outputs.algorithm_name }} for ${{ steps.branch_info.outputs.challenge_type }}
  
      - name: Update Commit Status (Success)
        if: success()
        uses: myrotvorets/set-commit-status-action@master
        with:
          status: 'success'
          sha: ${{ steps.auto_commit.outputs.commit_hash }}

      - name: Update Commit Status (Failure)
        if: failure()
        uses: myrotvorets/set-commit-status-action@master
        with:
          status: 'failure'
