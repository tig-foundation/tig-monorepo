use
{
    std::
    {
        thread,
        sync::
        {
            Arc,
            Mutex
        },
        collections::
        {
            HashSet,
            HashMap
        }
    },
    criterion::
    {
        Criterion,
        black_box,
        criterion_group,
        criterion_main
    },
    tig_structs::
    {
        core::
        {
            Point,
            Frontier
        }
    }
};

mod context;
mod add_block;

/*
struct BenchmarkContext
{
}

impl Context for BenchmarkContext
{
}*/

fn get_points()
                                                    -> Vec<Vec<Point>>
{
    //pub type Point = Vec<i32>;

    let mut challenges = Vec::new();

    challenges.push(Vec::new());
    let c001 = [[  70,  344],[  75,  336],[  98,  314],[  66,  355],[  131,  279],[  125,  281],[  68,  351],[  103,  304],[  61,  361],[  57,  369],[  92,  320],[  132,  277],[  81,  330],[  71,  340],[  71,  341],[  74,  339],[  89,  323],[  133,  276],[  67,  351],[  85,  328],[  77,  337],[  63,  360],[  77,  333],[  61,  365],[  93,  317],[  85,  325],[  57,  370],[  80,  332],[  132,  275],[  120,  288],[  68,  363],[  65,  356],[  94,  316],[  68,  349],[  108,  306],[  65,  357],[  63,  359],[  89,  321],[  90,  320],[  100,  307],[  131,  277],[  110,  298],[  118,  290],[  125,  284],[  70,  341],[  76,  334],[  75,  339],[  117,  291],[  122,  287],[  55,  375],[  73,  339],[  124,  282],[  107,  301],[  111,  294],[  121,  288],[  86,  324],[  101,  307],[  105,  304],[  118,  291],[  83,  328],[  94,  315],[  92,  316],[  97,  312],[  77,  334],[  102,  306],[  128,  279],[  125,  289],[  120,  289],[  126,  280],[  56,  372],[  73,  337],[  71,  349],[  110,  297],[  122,  286],[  119,  290],[  95,  317],[  73,  340],[  59,  366],[  79,  332],[  111,  295],[  95,  314],[  72,  339],[  108,  298],[  117,  290],[  60,  363],[  112,  294],[  106,  308],[  116,  297],[  67,  354],[  88,  323],[  91,  319],[  108,  300],[  78,  332],[  107,  300],[  86,  330],[  121,  287],[  104,  303],[  114,  292],[  61,  362],[  98,  311],[  118,  289],[  82,  328],[  62,  361],[  94,  318],[  78,  333],[  115,  291],[  58,  370],[  56,  371],[  93,  315],[  92,  319],[  105,  302],[  115,  290],[  113,  293],[  99,  308],[  91,  318],[  73,  338],[  83,  327],[  90,  322],[  77,  335],[  56,  375],[  57,  371],[  101,  306],[  69,  350],[  60,  362],[  79,  334],[  107,  299],[  105,  303],[  102,  305],[  104,  304],[  84,  328],[  93,  316],[  78,  334],[  106,  302],[  115,  301],[  70,  342],[  123,  283],[  119,  289],[  58,  368],[  70,  343],[  79,  333],[  69,  346],[  116,  290],[  99,  312],[  82,  330],[  131,  280],[  56,  373],[  88,  322],[  100,  308],[  69,  352],[  75,  335],[  71,  339],[  59,  367],[  78,  336],[  135,  275],[  131,  276],[  114,  291],[  108,  299],[  109,  299],[  112,  296],[  104,  305],[  134,  277],[  88,  325],[  106,  305],[  55,  376],[  100,  310],[  138,  275],[  69,  348],[  131,  278],[  92,  318],[  80,  333],[  71,  342],[  67,  352],[  102,  308],[  115,  292],[  111,  297],[  85,  326],[  59,  365],[  62,  360],[  92,  317],[  84,  326],[  130,  278],[  72,  338],[  85,  324],[  119,  288],[  57,  372],[  114,  294],[  126,  281],[  125,  282],[  95,  313],[  74,  338],[  110,  294],[  64,  356],[  94,  314],[  91,  317],[  95,  315],[  133,  279],[  55,  378],[  57,  373],[  121,  289],[  89,  322],[  94,  317],[  116,  291],[  109,  300],[  127,  282],[  120,  286],[  62,  364],[  90,  318],[  63,  358],[  61,  366],[  99,  309],[  76,  336],[  124,  284],[  74,  336],[  128,  280]   ];
    for point in c001
    {
        challenges[0].push(point.to_vec());
    }

    challenges.push(Vec::new());
    let c002 = [[  1240,  404],[  1601,  357],[  1191,  415],[  1140,  419],[  1529,  365],[  1519,  367],[  1625,  355],[  1147,  416],[  1529,  363],[  1256,  400],[  1505,  370],[  1271,  395],[  1152,  414],[  1239,  403],[  1555,  362],[  1135,  422],[  1235,  404],[  1077,  428],[  1027,  437],[  1271,  399],[  1525,  363],[  1249,  399],[  1019,  447],[  1007,  457],[  1003,  457],[  1053,  432],[  1243,  402],[  1076,  432],[  1214,  406],[  1494,  370],[  1258,  402],[  1622,  357],[  1221,  406],[  1493,  370],[  1347,  387],[  1085,  424],[  1065,  431],[  1249,  400],[  1232,  405],[  1245,  401],[  1092,  423],[  1238,  402],[  1024,  441],[  1140,  418],[  1080,  425],[  1430,  373],[  1233,  405],[  1242,  405],[  1608,  355],[  1527,  364],[  1246,  403],[  1054,  434],[  1074,  427],[  1283,  396],[  1362,  386],[  1439,  372],[  1396,  381],[  1441,  372],[  1607,  357],[  1162,  411],[  1183,  410],[  1242,  401],[  1063,  431],[  1196,  415],[  1252,  402],[  1398,  379],[  1284,  394],[  1476,  371],[  1634,  352],[  1565,  360],[  1248,  399],[  1547,  361],[  1427,  373],[  1395,  381],[  1237,  405],[  1017,  445],[  1161,  413],[  1101,  422],[  1437,  372],[  1055,  434],[  1426,  373],[  1619,  356],[  1392,  378],[  1347,  394],[  1433,  385],[  1090,  429],[  1264,  396],[  1419,  378],[  1577,  359],[  1529,  362],[  1047,  439],[  1299,  392],[  1236,  405],[  1107,  421],[  1311,  390],[  1380,  384],[  1254,  401],[  1691,  352],[  1101,  425],[  1143,  413],[  1061,  431],[  1036,  442],[  1300,  394],[  1265,  395],[  1525,  364],[  1454,  372],[  1543,  361],[  1253,  398],[  1326,  388],[  1199,  409],[  1315,  390],[  1305,  392],[  1280,  394],[  1063,  433],[  1218,  406],[  1392,  381],[  1151,  413],[  1211,  408],[  1511,  366],[  1083,  427],[  1122,  419],[  1427,  375],[  1107,  420],[  1571,  359],[  1098,  422],[  1181,  410],[  1245,  400],[  1044,  438],[  1144,  414],[  1669,  351],[  1316,  392],[  1091,  424],[  1257,  398],[  1530,  362],[  1269,  403],[  1043,  440],[  1377,  383],[  1513,  366],[  1602,  357],[  1443,  372],[  1086,  429],[  1505,  367],[  1319,  388],[  1514,  366],[  1245,  402],[  1390,  380],[  1291,  394],[  1321,  389],[  1244,  401],[  1250,  397],[  1306,  392],[  1286,  394],[  1499,  369],[  1241,  402],[  1419,  376],[  1252,  398],[  1253,  400],[  1436,  375],[  1396,  379],[  1544,  363],[  1324,  387],[  1359,  385],[  1246,  406],[  1251,  400],[  1388,  381],[  1318,  388],[  1300,  393],[  1097,  429],[  1074,  429],[  1158,  413],[  1078,  428],[  1262,  395],[  1480,  372],[  1421,  375],[  1060,  433],[  1252,  399],[  1146,  417],[  1016,  450],[  1393,  377],[  1069,  431],[  1298,  393],[  1506,  367],[  1215,  407],[  1272,  395],[  1032,  439],[  1639,  352],[  1312,  390],[  1609,  358],[  1238,  404],[  1251,  397],[  1308,  391],[  1232,  404],[  1075,  435],[  1617,  357],[  1091,  425],[  1623,  353],[  1205,  408],[  1058,  433],[  1605,  356],[  1157,  413],[  1440,  374],[  1668,  351],[  1520,  364],[  1386,  381],[  1657,  356],[  1351,  385],[  1716,  350],[  1024,  440],[  1612,  358],[  1248,  402],[  1144,  416],[  1091,  423],[  1074,  428],[  1054,  435],[  1526,  363],[  1266,  395],[  1157,  423],[  1188,  418],[  1512,  367],[  1638,  357],[  1018,  448],[  1431,  373],[  1402,  377],[  1383,  382],[  1603,  361],[  1075,  430],[  1516,  365],[  1182,  410],[  1164,  411],[  1342,  386],[  1514,  365],[  1213,  406],[  1014,  459],[  1509,  367],[  1502,  369],[  1323,  388],[  1027,  441],[  1424,  374],[  1603,  357],[  1250,  399],[  1015,  448],[  1734,  350],[  1238,  403],[  1102,  426],[  1047,  438],[  1262,  396],[  1316,  389],[  1144,  417],[  1064,  436],[  1434,  373],[  1528,  366],[  1310,  391],[  1569,  359],[  1521,  366],[  1674,  351],[  1324,  389],[  1199,  408],[  1069,  429],[  1566,  363],[  1451,  374],[  1614,  357],[  1026,  438],[  1390,  379],[  1111,  421],[  1157,  411],[  1442,  372],[  1386,  385],[  1040,  440],[  1020,  446],[  1352,  386],[  1359,  384],[  1229,  405],[  1377,  387],[  1309,  391],[  1509,  369],[  1226,  409],[  1534,  362],[  1285,  396],[  1217,  410],[  1262,  398],[  1066,  431],[  1386,  386],[  1722,  350],[  1057,  434],[  1067,  430],[  1213,  407],[  1620,  355],[  1187,  411],[  1088,  426],[  1201,  408],[  1106,  422],[  1346,  386],[  1175,  412],[  1206,  407],[  1087,  425],[  1445,  372],[  1138,  417],[  1239,  405],[  1085,  428],[  1395,  379],[  1428,  374],[  1239,  406],[  1138,  416],[  1079,  426],[  1088,  424],[  1188,  409],[  1320,  388],[  1046,  438],[  1517,  366],[  1376,  385],[  1217,  406],[  1337,  386],[  1028,  439],[  1659,  355],[  1099,  423],[  1506,  370],[  1414,  376],[  1148,  413],[  1064,  435],[  1339,  386],[  1566,  360],[  1304,  391],[  1131,  421],[  1432,  373],[  1267,  395],[  1215,  406],[  1030,  437],[  1051,  436],[  1653,  354],[  1397,  378],[  1382,  383],[  1632,  353],[  1102,  421],[  1123,  419],[  1079,  427],[  1639,  353],[  1101,  428],[  1624,  353],[  1099,  422],[  1159,  411],[  1000,  457],[  1391,  379],[  1397,  377],[  1016,  447],[  1031,  437],[  1511,  369]   ];
    for point in c002
    {
        challenges[1].push(point.to_vec());
    }

    challenges.push(Vec::new());
    let c003 = [   [     24703,     414   ],   [     3574,     433   ],   [     23244,     415   ],   [     30459,     412   ],   [     6829,     426   ],   [     5122,     428   ],   [     2411,     435   ],   [     2692,     435   ],   [     2924,     433   ],   [     5896,     427   ],   [     23142,     415   ],   [     19104,     417   ],   [     2997,     435   ],   [     3842,     432   ],   [     10427,     423   ],   [     3214,     434   ],   [     28413,     413   ],   [     4528,     429   ],   [     2263,     437   ],   [     4652,     428   ],   [     35185,     410   ],   [     7504,     425   ],   [     15392,     419   ],   [     2915,     436   ],   [     2365,     438   ],   [     11514,     422   ],   [     4720,     428   ],   [     2452,     435   ],   [     4753,     428   ],   [     2932,     434   ],   [     3195,     434   ],   [     12328,     421   ],   [     11616,     422   ],   [     3751,     432   ],   [     12320,     421   ],   [     21877,     416   ],   [     24694,     414   ],   [     7845,     424   ],   [     4546,     430   ],   [     34699,     410   ],   [     3008,     434   ],   [     2998,     433   ],   [     9540,     424   ],   [     18389,     418   ],   [     28489,     413   ],   [     30312,     412   ],   [     2409,     435   ],   [     16105,     419   ],   [     2790,     434   ],   [     34790,     410   ],   [     6411,     427   ],   [     15940,     419   ],   [     4768,     428   ],   [     2935,     433   ],   [     18231,     418   ],   [     4134,     432   ],   [     12860,     421   ],   [     11459,     422   ],   [     11162,     422   ],   [     18707,     417   ],   [     24393,     414   ],   [     15417,     419   ],   [     4846,     429   ],   [     32996,     411   ],   [     4792,     428   ],   [     2913,     433   ],   [     10621,     423   ],   [     2469,     435   ],   [     32881,     411   ],   [     4554,     431   ],   [     18938,     418   ],   [     11102,     422   ],   [     22031,     416   ],   [     4459,     431   ],   [     2319,     438   ],   [     3054,     433   ],   [     4655,     428   ],   [     28813,     413   ],   [     32338,     411   ],   [     2362,     435   ],   [     7456,     425   ],   [     19091,     417   ],   [     12472,     421   ],   [     8059,     425   ],   [     6206,     426   ],   [     4659,     428   ],   [     2346,     436   ],   [     16035,     419   ],   [     2342,     438   ],   [     32318,     411   ],   [     18311,     418   ],   [     2689,     434   ],   [     18270,     418   ],   [     6159,     426   ],   [     30597,     412   ],   [     6098,     427   ],   [     6797,     426   ],   [     4555,     433   ],   [     5974,     427   ],   [     2630,     436   ],   [     15506,     419   ],   [     6329,     426   ],   [     6320,     426   ],   [     32344,     411   ],   [     14883,     420   ],   [     2820,     435   ],   [     24321,     414   ],   [     6186,     426   ],   [     2762,     436   ],   [     7432,     425   ],   [     3657,     432   ],   [     6386,     426   ],   [     32304,     411   ],   [     2339,     436   ],   [     23400,     415   ],   [     12818,     421   ],   [     2732,     437   ],   [     3540,     433   ],   [     22045,     416   ],   [     2561,     436   ],   [     6527,     426   ],   [     18953,     417   ],   [     3206,     434   ],   [     28624,     413   ],   [     32510,     411   ],   [     32925,     411   ],   [     5116,     429   ],   [     32423,     411   ],   [     4640,     428   ],   [     18536,     417   ],   [     30342,     412   ],   [     4694,     428   ],   [     4605,     428   ],   [     4603,     428   ],   [     2471,     435   ],   [     2245,     437   ],   [     2676,     434   ],   [     12830,     421   ],   [     4985,     428   ],   [     5093,     428   ],   [     23498,     415   ],   [     3249,     433   ],   [     3290,     433   ],   [     4684,     428   ],   [     4628,     428   ],   [     11148,     422   ],   [     18433,     418   ],   [     15732,     419   ],   [     2504,     435   ],   [     2602,     438   ],   [     3358,     434   ],   [     24872,     414   ],   [     2779,     436   ],   [     23151,     415   ],   [     2711,     436   ],   [     12299,     421   ],   [     2416,     435   ],   [     4681,     431   ],   [     2907,     433   ],   [     35184,     410   ],   [     12814,     421   ],   [     15848,     419   ],   [     14671,     420   ],   [     5089,     430   ],   [     6475,     426   ],   [     6046,     427   ],   [     15607,     419   ],   [     6851,     426   ],   [     2671,     435   ],   [     2035,     442   ],   [     2431,     438   ],   [     7465,     425   ],   [     2424,     436   ],   [     34760,     410   ],   [     2603,     437   ],   [     3844,     433   ],   [     32413,     411   ],   [     28353,     413   ],   [     15497,     419   ],   [     3005,     434   ],   [     2401,     437   ],   [     2312,     437   ],   [     34732,     410   ],   [     2542,     435   ],   [     4854,     429   ],   [     2769,     437   ],   [     24760,     414   ],   [     10790,     423   ],   [     28186,     413   ],   [     2511,     438   ],   [     6813,     426   ],   [     30519,     412   ],   [     4660,     431   ],   [     8054,     425   ],   [     2537,     435   ],   [     2959,     433   ],   [     10543,     423   ],   [     6280,     426   ],   [     5174,     429   ],   [     3215,     434   ],   [     32501,     411   ],   [     4668,     429   ],   [     2699,     434   ],   [     3162,     434   ],   [     35181,     410   ],   [     7835,     425   ],   [     5245,     428   ],   [     21677,     416   ],   [     34860,     410   ],   [     2610,     437   ],   [     23122,     415   ],   [     2591,     435   ],   [     2485,     436   ],   [     32356,     411   ],   [     18712,     418   ],   [     6170,     426   ],   [     2777,     435   ],   [     32657,     411   ],   [     6427,     426   ],   [     18681,     418   ],   [     4835,     430   ],   [     4395,     431   ],   [     4775,     431   ],   [     4840,     429   ],   [     7720,     425   ],   [     23221,     415   ],   [     12452,     421   ],   [     15479,     419   ],   [     5233,     428   ],   [     7677,     425   ],   [     28767,     413   ],   [     4554,     429   ],   [     24983,     414   ],   [     3332,     434   ],   [     11185,     422   ],   [     2683,     437   ],   [     21830,     416   ],   [     34755,     410   ],   [     2514,     435   ],   [     15402,     419   ],   [     4666,     428   ],   [     3823,     432   ],   [     4668,     428   ],   [     3322,     433   ],   [     7564,     425   ],   [     3255,     433   ],   [     2696,     434   ],   [     30526,     412   ],   [     3715,     432   ],   [     2610,     436   ],   [     2373,     436   ],   [     7635,     425   ],   [     12666,     421   ],   [     3176,     433   ],   [     7994,     425   ],   [     6412,     427   ],   [     15415,     419   ],   [     2674,     434   ],   [     5227,     429   ],   [     18566,     417   ],   [     2533,     436   ],   [     2913,     435   ],   [     6332,     426   ],   [     2702,     434   ],   [     32749,     411   ],   [     3399,     433   ],   [     2726,     436   ],   [     28885,     413   ],   [     2402,     437   ],   [     4671,     428   ],   [     2607,     435   ],   [     2439,     436   ],   [     2298,     437   ],   [     2212,     438   ],   [     12515,     421   ],   [     2423,     438   ],   [     2299,     439   ],   [     21517,     416   ],   [     6048,     427   ],   [     2559,     436   ],   [     11322,     422   ],   [     2813,     436   ],   [     2802,     435   ],   [     3290,     434   ],   [     15577,     419   ],   [     12282,     421   ],   [     22125,     416   ],   [     21763,     416   ],   [     3187,     433   ],   [     2719,     434   ],   [     2279,     438   ],   [     2483,     435   ],   [     4926,     430   ],   [     2987,     433   ],   [     28477,     413   ],   [     23133,     415   ],   [     7442,     425   ] ];
    for point in c003
    {
        challenges[2].push(point.to_vec());
    }

    challenges.push(Vec::new());
    let c004 = [[  451,  501],[  109,  565],[  281,  521],[  174,  540],[  312,  517],[  293,  519],[  134,  553],[  161,  547],[  210,  532],[  396,  507],[  203,  535],[  281,  522],[  166,  542],[  131,  556],[  190,  538],[  178,  539],[  211,  533],[  204,  534],[  105,  566],[  173,  541],[  140,  551],[  120,  558],[  257,  525],[  117,  561],[  129,  555],[  192,  538],[  299,  518],[  189,  538],[  294,  519],[  161,  546],[  113,  562],[  113,  563],[  171,  543],[  127,  557],[  256,  525],[  208,  533],[  370,  510],[  130,  554],[  326,  515],[  176,  539],[  158,  548],[  328,  514],[  141,  552],[  102,  566],[  368,  510],[  365,  511],[  464,  500],[  216,  531],[  179,  539],[  132,  553],[  255,  526],[  461,  500],[  462,  500],[  431,  503],[  177,  540],[  172,  541],[  213,  531],[  373,  509],[  143,  549],[  114,  561],[  297,  518],[  175,  541],[  314,  517],[  191,  538],[  178,  540],[  459,  500],[  367,  511],[  454,  501],[  378,  509],[  411,  506],[  279,  522],[  240,  529],[  196,  537],[  198,  536],[  452,  501],[  212,  531],[  170,  542],[  162,  546],[  116,  561],[  115,  560],[  171,  542],[  162,  544],[  326,  514],[  414,  506],[  211,  531],[  130,  555],[  209,  533],[  129,  554],[  267,  524],[  119,  559],[  199,  536],[  131,  554],[  438,  502],[  131,  553],[  370,  509],[  255,  525],[  145,  549],[  161,  544],[  213,  532],[  439,  502],[  140,  552],[  181,  539],[  141,  553],[  206,  534],[  171,  541],[  110,  564],[  104,  566],[  312,  519],[  412,  506],[  111,  563],[  118,  559],[  205,  535],[  141,  551],[  207,  533],[  205,  534],[  294,  520],[  142,  549],[  317,  516],[  204,  535],[  296,  519],[  238,  529],[  103,  567],[  390,  508],[  264,  525],[  293,  520],[  292,  520],[  334,  513],[  126,  557],[  159,  547],[  143,  551],[  336,  513],[  211,  532],[  164,  545],[  387,  508],[  313,  517],[  282,  521],[  239,  529],[  214,  532],[  200,  536],[  436,  503],[  258,  525],[  165,  543],[  264,  524],[  101,  567],[  100,  568],[  112,  563],[  132,  554],[  230,  530],[  426,  505],[  145,  550],[  316,  516],[  161,  545],[  318,  516],[  315,  516],[  241,  528],[  424,  505],[  128,  556],[  257,  526],[  453,  501],[  429,  504],[  160,  547],[  212,  532],[  243,  528],[  103,  566],[  115,  561],[  346,  512],[  430,  504],[  210,  533],[  226,  531],[  107,  565],[  345,  512],[  150,  549],[  295,  519],[  203,  534],[  162,  545],[  177,  539],[  129,  557],[  389,  508],[  251,  526],[  298,  518],[  329,  514],[  315,  517],[  143,  550],[  248,  527],[  202,  535],[  164,  544],[  296,  518],[  201,  535],[  280,  522],[  163,  545],[  172,  542],[  242,  528],[  121,  559],[  112,  564],[  332,  514],[  102,  567],[  344,  512],[  372,  509],[  366,  511],[  440,  502],[  131,  555],[  327,  514],[  436,  502],[  458,  500],[  119,  558]   ];
    for point in c004
    {
        challenges[3].push(point.to_vec());
    }

    return challenges;
}

#[inline]
fn bench_update_qualifiers_st(
    challenges:                             &Vec<Vec<Point>>
)                                                   -> Vec<HashMap<Point, usize>>
{
    let mut frontiers                                   = Vec::new();

    for challenge_data in challenges
    {
        let points                                      = challenge_data
            .iter()
            .map(|d| d.iter().map(|x| -x).collect()) // mirror the points so easiest difficulties are first
            .collect::<Frontier>();

        let mut frontier_indexes    = HashMap::<Point, usize>::new();
        for (frontier_index, frontier) in add_block::pareto_algorithm(points, false).into_iter().enumerate() 
        {
            for point in frontier 
            {
                frontier_indexes.insert(point, frontier_index);
            }
        }

        frontiers.push(frontier_indexes);
    }

    return frontiers;
}

#[inline]
fn bench_update_qualifiers_mt(
    challenges:                             &Vec<Vec<Point>>
)                                                   -> Vec<HashMap<Point, usize>>
{
    let frontiers                                       = Arc::new(Mutex::new(Vec::new()));

    thread::scope(|s|
    {
        for challenge_data in challenges
        {
            let frontiers_                              = frontiers.clone();
            s.spawn(||
            {
                let points                                      = challenge_data
                    .iter()
                    .map(|d| d.iter().map(|x| -x).collect()) // mirror the points so easiest difficulties are first
                    .collect::<Frontier>();
        
                let mut frontier_indexes    = HashMap::<Point, usize>::new();
                for (frontier_index, frontier) in add_block::pareto_algorithm(points, false).into_iter().enumerate() 
                {
                    for point in frontier 
                    {
                        frontier_indexes.insert(point, frontier_index);
                    }
                }
        
                frontiers.lock().unwrap().push(frontier_indexes);
            });
        }
    });

    return Arc::try_unwrap(frontiers).unwrap().into_inner().unwrap();
}

pub fn criterion_benchmark(
    c:                                      &mut Criterion
) 
{
    let challenges                                      = get_points();

    c.bench_function("update_qualifiers_singlethread", |b|
    {
        b.iter(|| bench_update_qualifiers_st(&challenges));
    });

    c.bench_function("update_qualifiers_multithread", |b|
    {
        b.iter(|| bench_update_qualifiers_mt(&challenges));
    });
}

criterion_group!(benches, criterion_benchmark);
criterion_main!(benches);